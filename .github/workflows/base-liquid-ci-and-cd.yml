# CI & CD workflow
name: CI/CD - Base Reusable CI & CD workflow used by Liquid Application Framework components

on:
  # Allows this workflow to be called by other workflows
  workflow_call:
    inputs:
      component_name:
        description: 'The component name to build'
        required: true
        type: string
    secrets:
      sonar_token:
        required: true
      nuget_token:
        required: false

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Identify Job Type from workflow trigger event type
      run: |
        if [ "$GITHUB_EVENT_NAME" == "push" ]
        then
          echo "Starting CD Job: Build, Test, Analyze, Pack and Publish library to Nuget.org..."
        else
          echo "Starting CI Job: Build, Test and Analyze..."
        fi
    
    - name: (CI on PR) Checkout repo on Pull Request
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/checkout@v3
      with:
        ref: ${{github.event.pull_request.head.ref}}
        repository: ${{github.event.pull_request.head.repo.full_name}}
        fetch-depth: 0 # required to eliminate shallow clone warning in Sonarcloud analysis
        
    - name: (CI/CD) Checkout repo
      if: ${{ github.event_name != 'pull_request' }}
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # required to eliminate shallow clone warning in Sonarcloud analysis

    # required by sonarcloud scanner
    - name: (CI/CD) Setup Java JDK
      if: ${{ github.event_name != 'pull_request' || (github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]') }}
      uses: actions/setup-java@v3
      with:
        # The Java version to make available on the path. Takes a whole or semver Java version, or 1.x syntax (e.g. 1.8 => Java 8.x). Early access versions can be specified in the form of e.g. 14-ea, 14.0.0-ea, or 14.0.0-ea.28
        distribution: 'microsoft'
        java-version: 17.x
        
    - name: (CI/CD) Setup .NET Core SDK
      uses: actions/setup-dotnet@v2
      with:
        # SDK version to use. Examples: 2.2.104, 3.1, 3.1.x
        dotnet-version: 3.1.x, 5.0.x, 6.0.x 

    # required by sonarcloud scanner
    - name: (CI/CD) Setup Sonar Scanner tool
      if: ${{ github.event_name != 'pull_request' || (github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]') }}
      run: dotnet tool install --global dotnet-sonarscanner

    - name: (CI/CD) Install Test Reporting Tool
      run: dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: (CI/CD) Restore dependencies
      run: dotnet restore src/${{ inputs.component_name }}/${{ inputs.component_name }}.csproj

    - name: (CI/CD) Build and Analyze Project
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.sonar_token }}
        RUN_SONAR: ${{ github.event_name != 'pull_request' || (github.event.pull_request.head.repo.full_name == github.repository && github.actor != 'dependabot[bot]') }}
      run: |
        if [ "$RUN_SONAR" == "true" ]
        then
          if [[ -d test/${{ inputs.component_name }}.Tests && -f test/${{ inputs.component_name }}.Tests/${{ inputs.component_name }}.Tests.csproj ]]
          then 
            dotnet sonarscanner begin /k:"${{ inputs.component_name }}" /o:"avanade-1" /d:sonar.login="${{ secrets.sonar_token }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vstest.reportsPaths=$GITHUB_WORKSPACE/test/testresults/*.trx /d:sonar.coverageReportPaths=$GITHUB_WORKSPACE/test/coverlet/reports/SonarQube.xml
          else
            dotnet sonarscanner begin /k:"${{ inputs.component_name }}" /o:"avanade-1" /d:sonar.login="${{ secrets.sonar_token }}" /d:sonar.host.url="https://sonarcloud.io"
          fi
        fi
        
        dotnet build src/${{ inputs.component_name }}/${{ inputs.component_name }}.csproj --configuration Release --no-restore
        
        if [[ -d test/${{ inputs.component_name }}.Tests && -f test/${{ inputs.component_name }}.Tests/${{ inputs.component_name }}.Tests.csproj ]]
        then 
          dotnet test test/${{ inputs.component_name }}.Tests/${{ inputs.component_name }}.Tests.csproj --collect:"XPlat Code Coverage" --logger trx --results-directory $GITHUB_WORKSPACE/test/testresults
          reportgenerator -reports:$GITHUB_WORKSPACE/test/testresults/**/coverage.cobertura.xml -targetdir:$GITHUB_WORKSPACE/test/coverlet/reports -reporttypes:"SonarQube"
        fi
        
        if [ "$RUN_SONAR" == "true" ]
        then
          dotnet sonarscanner end /d:sonar.login="${{ secrets.sonar_token }}"
        fi

    - name: (CD) Nuget Pack & Push to Nuget.org
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      run: |
        dotnet pack --no-build --configuration Release src/${{ inputs.component_name }}/${{ inputs.component_name }}.csproj --output .
        dotnet nuget push *.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.nuget_token }} --skip-duplicate
        
